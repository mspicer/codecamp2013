{
  "name": "grunt-neuter",
  "version": "0.4.0",
  "description": "Builds source files in the order you require.",
  "main": "Gruntfile.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:trek/grunt-neuter.git"
  },
  "keywords": [
    "build",
    "grunt",
    "concat",
    "gruntplugin"
  ],
  "author": {
    "name": "Trek Glowacki",
    "email": "trek.glowacki@gamil.com"
  },
  "license": "MIT",
  "dependencies": {
    "glob": "~3.2.1"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-nodeunit": "0.1.2",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-internal": "~0.4.3"
  },
  "readme": "# grunt-neuter\n\n> Concatenate files in the order you `require`.\n\n_Note that this plugin has not yet been released, and only works with the latest bleeding-edge, in-development version of grunt. See the [When will I be able to use in-development feature 'X'?](https://github.com/gruntjs/grunt/wiki/Frequently-Asked-Questions) FAQ entry for more information._\n\n## Getting Started\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n\n```shell\nnpm install grunt-neuter --save-dev\n```\nor for the latest version\n\n```shell\nnpm install git://github.com/trek/grunt-neuter.git --save-dev\n```\n\nThen include the tasks in your project's Gruntfile\n\n```javascript\ngrunt.loadNpmTasks('grunt-neuter');\n```\n\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\n\n\n## Neuter task\n_Run this task with the `grunt neuter` command._\n\n_This task is a [multi task](https://github.com/gruntjs/grunt/wiki/Configuring-tasks) so any targets, files and options should be specified according to the [multi task](https://github.com/gruntjs/grunt/wiki/Configuring-tasks) documentation._\n\nUse a neutering task for\n\n  1. Breaking up a project into files: some applications are easier to reason about\n     when their source is divided into files and organzied with directories\n\n  2. Keep intra-project dependency management inline: rather than have to track\n     and updated files and their order in a Make/Cake/Rakefile or a JSON object.\n\n  3. Have files separated in debugging, combined in production: When using\n     good development tools you want to easily map your debugging efforts to\n     a specific file, not read through one giant file.\n\n  4. Not need a dependency management library deployed: for applications\n     deployed as a single file the benefits of modular file loaders like\n     [require.js](http://requirejs.org/) is minimized.\n\nNeuter is based on the [Rake pipline web-filter of the same name](https://github.com/wycats/rake-pipeline-web-filters)\n\n### Options\n\n### template\nType: `String`\n\nDefault: `\"(function){ {%= src %} })();\"`\n\nThe wrapper around your code. Defaults to a closure-style function so locally declared variables\nwon't leak into the global scope. The text of your source JavaScript file is available as `src`\nwithin a template.\n\n### filepathTransform\nType: `Function`\n\nDefault: `function(filepath){ return filepath; }`\n\nSpecifying a filepath transform allows you to omit said portion of the filepath from your require statements. For example: when using `filepathTransform: function(filepath){ return 'lib/js/' + filepath; }` in your task options, require(\"lib/js/file.js\") can instead be written as require(\"file.js\").\n\n### includeSourceURL\nType: Boolean`\n\nDefault: `false`\n\nIncludes the path to your source JavaScript file as `//@ sourceURL=\"path/to/my/file.js\"` for\n[nicer debugging](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl). Note that this wraps your source JavaScript file (as a string) with `eval` and should not be used in prouduction.\n\n### separator\nType: `String`\n\nDefault: `\"\\n\"`\n\nNeutered files will be joined on this string. If you're post-processing concatenated JavaScript files with a minifier, you may need to use a semicolon `';'` as the separator although the semicolon at the end of the template should suffice.\n\n### skipFiles\nType: `Array`\n\nDefault: `[]`\n\nA list of files being required that should not be checked for further require statements.\nUseful for libraries that support other module building methods and leave their requires\naround in a way that isn't meaningful to neutering.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/trek/grunt-neuter/issues"
  },
  "_id": "grunt-neuter@0.4.0",
  "dist": {
    "shasum": "aa55780ee7233861e96040886472f04f6b923ab2"
  },
  "_resolved": "git://github.com/thomasboyt/grunt-neuter.git#a9f0a44bef0011fab8de4c35b7a511744c6c4afa",
  "_from": "grunt-neuter@git://github.com/thomasboyt/grunt-neuter.git#glob-support"
}
