{
  "author": {
    "name": "Diogo Resende",
    "email": "dresende@thinkdigital.pt"
  },
  "name": "orm",
  "description": "NodeJS Object-relational mapping",
  "keywords": [
    "orm",
    "odm",
    "database",
    "mysql",
    "postgres",
    "redshift",
    "sqlite"
  ],
  "version": "2.0.15",
  "license": "MIT",
  "homepage": "http://dresende.github.io/node-orm2",
  "repository": {
    "type": "git",
    "url": "http://github.com/dresende/node-orm2.git"
  },
  "scripts": {
    "test": "make test"
  },
  "contributors": [
    {
      "name": "Bramus Van Damme",
      "email": "bramus@bram.us"
    },
    {
      "name": "Lorien Gamaroff",
      "email": "lorien@gamaroff.org"
    },
    {
      "name": "preslavrachev"
    },
    {
      "name": "Chris Cowan",
      "email": "me@chriscowan.us"
    },
    {
      "name": "Paul Dixon",
      "email": "paul.dixon@mintbridge.co.uk"
    },
    {
      "name": "David Kosub"
    },
    {
      "name": "Arek W"
    },
    {
      "name": "Joseph Gilley",
      "email": "joe.gilley@gmail.com"
    }
  ],
  "main": "./lib/ORM",
  "engines": {
    "node": "*"
  },
  "analyse": false,
  "dependencies": {
    "sql-query": "0.1.3",
    "hat": "0.0.3",
    "lodash": "1.3.1"
  },
  "devDependencies": {
    "utest": "0.0.6",
    "urun": "0.0.6",
    "mysql": "2.0.0-alpha7",
    "pg": "1.0.0",
    "sqlite3": "2.1.7",
    "async": "*",
    "mocha": "1.12.0",
    "should": "1.2.2"
  },
  "optionalDependencies": {},
  "readme": "## Object Relational Mapping\n\n[![Build Status](https://secure.travis-ci.org/dresende/node-orm2.png?branch=master)](http://travis-ci.org/dresende/node-orm2)\n[![](https://badge.fury.io/js/orm.png)](https://npmjs.org/package/orm)\n[![](https://gemnasium.com/dresende/node-orm2.png)](https://gemnasium.com/dresende/node-orm2)\n\n## Install\n\n```sh\nnpm install orm\n```\n\n## Node.js Version Support\n\nTests are done using [Travis CI](https://travis-ci.org/) for node versions 0.4.x, 0.6.x, 0.8.x and 0.10.x. If you want you can run\ntests locally.\n\n```sh\nmake\n```\n\n## DBMS Support\n\n- MySQL\n- PostgreSQL\n- Amazon Redshift\n- SQLite\n\n## Features\n\n- Create Models, sync, drop, bulk create, get, find, remove, count, aggregated functions\n- Create Model associations, find, check, create and remove\n- Define custom validations (several builtin validations, check instance properties before saving)\n- Model instance caching and integrity (table rows fetched twice are the same object, changes to one change all)\n- Plugins: [MySQL FTS](http://dresende.github.io/node-orm-mysql-fts) , [Pagination](http://dresende.github.io/node-orm-paging) , [Transaction](http://dresende.github.io/node-orm-transaction)\n\n## Introduction\n\nThis is a node.js object relational mapping module.\n\nAn example:\n\n```js\nvar orm = require(\"orm\");\n\norm.connect(\"mysql://username:password@host/database\", function (err, db) {\n  if (err) throw err;\n\n\tvar Person = db.define(\"person\", {\n\t\tname      : String,\n\t\tsurname   : String,\n\t\tage       : Number,\n\t\tmale      : Boolean,\n\t\tcontinent : [ \"Europe\", \"America\", \"Asia\", \"Africa\", \"Australia\", \"Antartica\" ], // ENUM type\n\t\tphoto     : Buffer, // BLOB/BINARY\n\t\tdata      : Object // JSON encoded\n\t}, {\n\t\tmethods: {\n\t\t\tfullName: function () {\n\t\t\t\treturn this.name + ' ' + this.surname;\n\t\t\t}\n\t\t},\n\t\tvalidations: {\n\t\t\tage: orm.validators.rangeNumber(18, undefined, \"under-age\")\n\t\t}\n\t});\n\n\tPerson.find({ surname: \"Doe\" }, function (err, people) {\n\t\t// SQL: \"SELECT * FROM person WHERE surname = 'Doe'\"\n\n\t\tconsole.log(\"People found: %d\", people.length);\n\t\tconsole.log(\"First person: %s, age %d\", people[0].fullName(), people[0].age);\n\n\t\tpeople[0].age = 16;\n\t\tpeople[0].save(function (err) {\n\t\t\t// err.msg = \"under-age\";\n\t\t});\n\t});\n});\n```\n\n## Express\n\nIf you're using Express, you might want to use the simple middleware to integrate more easily.\n\n```js\nvar express = require('express');\nvar orm = require('orm');\nvar app = express();\n\napp.use(orm.express(\"mysql://username:password@host/database\", {\n\tdefine: function (db, models) {\n\t\tmodels.person = db.define(\"person\", { ... });\n\t}\n}));\napp.listen(80);\n\napp.get(\"/\", function (req, res) {\n\t// req.models is a reference to models used above in define()\n\treq.models.person.find(...);\n});\n```\n\nYou can call `orm.express` more than once to have multiple database connections. Models defined across connections\nwill be joined together in `req.models`. **Don't forget to use it before `app.use(app.router)`, preferably right after your\nassets public folder(s).**\n\n## Settings\n\nSettings are used to store key value pairs. A settings object is stored on the global orm object and on each database connection.\n\n```js\nvar orm = require(\"orm\");\n\norm.settings.set(\"some.deep.value\", 123);\n\norm.connect(\"....\", function (err, db) {\n\t// db.settings is a snapshot of the settings at the moment\n\t// of orm.connect(). changes to it don't affect orm.settings\n\n\tconsole.log(db.settings.get(\"some.deep.value\")); // 123\n\tconsole.log(db.settings.get(\"some.deep\"));       // { value: 123 }\n});\n```\n\n## Connecting\n\nFirst, add the correct driver to your `package.json`:\n\n driver                | dependency\n:----------------------|:---------------------------\n mysql                 | `\"mysql\" : \"2.0.0-alpha7\"`\n postgres<br/>redshift | `\"pg\": \"~1.0.0\"`\n sqlite                | `\"sqlite3\" : \"2.1.7\"`\n\nThese are the versions tested. Use others (older or newer) at your own risk.\n\n### Options\n\nYou can pass in connection options either as a string:\n\n```js\nvar orm = require(\"orm\");\n\norm.connect(\"mysql://username:password@host/database?pool=true\", function (err, db) {\n\t// ...\n});\n```\n\n**Note:** `pool` is only supported by mysql & postgres. When 'pool' is set to true, your database connections are cached so that connections can be reused, optimizing performance.\n\n**Note:** `strdates` is only supported by sqlite. When true, date fields are saved as strings, compatible with django\n\nOr as an object:\n\n```js\nvar opts = {\n  database : \"dbname\",\n  protocol : \"[mysql|postgres|redshift|sqlite]\",\n  host     : \"127.0.0.1\",\n  port     : 3306,         // optional, defaults to database default\n  user     : \"..\",\n  password : \"..\",\n  query    : {\n    pool     : true|false,   // optional, false by default\n    debug    : true|false,   // optional, false by default\n    strdates : true|false    // optional, false by default\n  }\n};\norm.connect(opts, function (err, db) {\n\t// ...\n});\n```\n\nYou can also avoid passing a callback and just listen for the connect event:\n\n```js\nvar orm = require(\"orm\");\nvar db  = orm.connect(\"mysql://username:password@host/database\");\n\ndb.on(\"connect\", function (err, db) {\n\t// ...\n});\n```\n\n## Models\n\nA Model is an abstraction over one or more database tables. Models support associations (more below). The name of the model is assumed to match the table name.\n\nModels support behaviours for accessing and manipulating table data.\n\n## Defining Models\n\nCall `define` on the database connection to setup a model. The name of the table and model is used as an identifier for the model on the database connection, so you can easily access the model later using the connection.\n\n```js\nvar Person = db.define('person', {        // 'person' will be the table in the database as well as the model id\n\t// properties\n\tname    : String,                     // you can use native objects to define the property type\n\tsurname : { type: \"text\", size: 50 }  // or you can be specific and define aditional options\n}, {\n\t// options (optional)\n});\n```\n\n### Properties\n\n#### Types\n\n\n Native   | String     | Native   | String\n :--------|:-----------|:---------|:---------\n String   | 'text'     | Date     | 'date '\n Number   | 'number'   | Object   | 'object'\n Boolean  | 'boolean'  | Buffer   | 'binary'\n          |            |  ---     | 'enum'\n\n#### Options\n\n##### [all types]\n* `required`: true marks the column as `NOT NULL`, false (default)\n* `defaultValue`: sets the default value for the field\n\n##### string\n* `size`: max length of the string\n\n##### number\n* `rational`: true (default) creates a FLOAT/REAL, false an INTEGER\n* `size`: byte size of number, default is 4. Note that 8 byte numbers [have limitations](http://stackoverflow.com/questions/307179/what-is-javascripts-max-int-whats-the-highest-integer-value-a-number-can-go-t)\n* `unsigned`: true to make INTEGER unsigned, default is false\n\n##### date\n* `time`: true (default) creates a DATETIME/TIMESTAMP, false a DATE\n\nNote that these may vary accross drivers.\n\n### Instance Methods\n\nAre passed in during model definition.\n\n```js\nvar Person = db.define('person', {\n    name    : String,\n    surname : String\n}, {\n    methods: {\n        fullName: function () {\n            return this.name + ' ' + this.surname;\n        }\n    }\n});\n\nPerson.get(4, function(err, person) {\n    console.log( person.fullName() );\n})\n```\n\n### Model Methods\n\nAre defined directly on the model.\n\n```js\nvar Person = db.define('person', {\n    name    : String,\n    height  : { type: 'number', rational: false }\n});\nPerson.tallerThan = function(height, callback) {\n    this.find({ height: orm.gt(height) }, callback);\n};\n\nPerson.tallerThan( 192, function(err, tallPeople) { ... } );\n```\n\n\n## Loading Models\n\nModels can be in separate modules. Simply ensure that the module holding the models uses module.exports to publish a function that accepts the database connection, then load your models however you like.\n\nNote - using this technique you can have cascading loads.\n\n```js\n// your main file (after connecting)\ndb.load(\"./models\", function (err) {\n    // loaded!\n    var Person = db.models.person;\n    var Pet    = db.models.pet;\n});\n\n// models.js\nmodule.exports = function (db, cb) {\n    db.load(\"./models-extra\", function (err) {\n        if (err) {\n            return cb(err);\n        }\n\n        db.define('person', {\n            name : String\n        });\n\n        return cb();\n    });\n};\n\n// models-extra.js\nmodule.exports = function (db, cb) {\n    db.define('pet', {\n        name : String\n    });\n\n    return cb();\n};\n```\n\n## Synchronizing Models\n\nModels can create their underlying tables in the database. You may call Model.sync() on each Model to create the underlying table or you can call db.sync() at a connection level to create all tables for all models.\n\n```js\n// db.sync() can also be used\nPerson.sync(function (err) {\n\t!err && console.log(\"done!\");\n});\n```\n\n## Dropping Models\n\nIf you want to drop a Model and remove all tables you can use the `.drop()` method.\n\n```js\nPerson.drop(function (err) {\n\t!err && console.log(\"person model no longer exists!\");\n});\n```\n\n## Advanced Options\n\nORM2 allows you some advanced tweaks on your Model definitions. You can configure these via settings or in the call to `define` when you setup the Model.\n\nFor example, each Model instance has a unique ID in the database. This table column is\nby default \"id\" but you can change it.\n\n```js\nvar Person = db.define(\"person\", {\n\tname : String\n}, {\n\tid   : \"person_id\"\n});\n\n// or just do it globally..\ndb.settings.set(\"properties.primary_key\", \"UID\");\n\n// ..and then define your Models\nvar Pet = db.define(\"pet\", {\n\tname : String\n});\n```\n\n**Pet** model will have 2 columns, an `UID` and a `name`.\n\nOther options:\n\n- `cache` : (default: `true`) Set it to `false` to disable Instance cache ([Singletons](#singleton)) or set a timeout value (in seconds);\n- `autoSave` : (default: `false`) Set it to `true` to save an Instance right after changing any property;\n- `autoFetch` : (default: `false`) Set it to `true` to fetch associations when fetching an instance from the database;\n- `autoFetchLimit` : (default: `1`) If `autoFetch` is enabled this defines how many hoops (associations of associations)\n  you want it to automatically fetch.\n\n## Hooks\n\nIf you want to listen for a type of event than occurs in instances of a Model, you can attach a function that\nwill be called when that event happens.\n\nCurrently the following events are supported:\n\n- `afterLoad` : (no parameters) Right after loading and preparing an instance to be used;\n- `afterAutoFetch` : (no parameters) Right after auto-fetching associations (if any), it will trigger regardless of having associations or not;\n- `beforeSave` : (no parameters) Right before trying to save;\n- `afterSave` : (bool success) Right after saving;\n- `beforeCreate` : (no parameters) Right before trying to save a new instance (prior to `beforeSave`);\n- `afterCreate` : (bool success) Right after saving a new instance;\n- `beforeRemove` : (no parameters) Right before trying to remove an instance;\n- `afterRemove` : (bool success) Right after removing an instance;\n- `beforeValidation` : (no parameters) Before all validations and prior to `beforeCreate` and `beforeSave`;\n\nAll hook function are called with `this` as the instance so you can access anything you want related to it.\n\nFor all `before*` hooks, you can add an additional parameter to the hook function. This parameter will be a function that\nmust be called to tell if the hook allows the execution to continue or to break. You might be familiar with this workflow\nalready from Express. Here's an example:\n\n```js\nvar Person = db.define(\"person\", {\n\tname    : String,\n\tsurname : String\n}, {\n\thooks: {\n\t\tbeforeCreate: function (next) {\n\t\t\tif (this.surname == \"Doe\") {\n\t\t\t\treturn next(new Error(\"No Does allowed\"));\n\t\t\t}\n\t\t\treturn next();\n\t\t}\n\t}\n});\n```\n\nThis workflow allows you to make asynchronous work before calling `next`.\n\n## Finding Items\n\n### Model.get(id, [ options ], cb)\n\nTo get a specific element from the database use `Model.get`.\n\n```js\nPerson.get(123, function (err, person) {\n\t// finds person with id = 123\n});\n```\n\n### Model.find([ conditions ] [, options ] [, limit ] [, order ] [, cb ])\n\nFinding one or more elements has more options, each one can be given in no specific parameter order. Only `options` has to be after `conditions` (even if it's an empty object).\n\n```js\nPerson.find({ name: \"John\", surname: \"Doe\" }, 3, function (err, people) {\n\t// finds people with name='John' AND surname='Doe' and returns the first 3\n});\n```\n\nIf you need to sort the results because you're limiting or just because you want them sorted do:\n\n```js\nPerson.find({ surname: \"Doe\" }, \"name\", function (err, people) {\n\t// finds people with surname='Doe' and returns sorted by name ascending\n});\nPerson.find({ surname: \"Doe\" }, [ \"name\", \"Z\" ], function (err, people) {\n\t// finds people with surname='Doe' and returns sorted by name descending\n\t// ('Z' means DESC; 'A' means ASC - default)\n});\n```\n\nThere are more options that you can pass to find something. These options are passed in a second object:\n\n```js\nPerson.find({ surname: \"Doe\" }, { offset: 2 }, function (err, people) {\n\t// finds people with surname='Doe', skips the first 2 and returns the others\n});\n```\n\n### Model.count([ conditions, ] cb)\n\nIf you just want to count the number of items that match a condition you can just use `.count()` instead of finding all\nof them and counting. This will actually tell the database server to do a count (it won't be done in the node process itself).\n\n```js\nPerson.count({ surname: \"Doe\" }, function (err, count) {\n\tconsole.log(\"We have %d Does in our db\", count);\n});\n```\n\n### Model.exists([ conditions, ] cb)\n\nSimilar to `.count()`, this method just checks if the count is greater than zero or not.\n\n```js\nPerson.exists({ surname: \"Doe\" }, function (err, exists) {\n\tconsole.log(\"We %s Does in our db\", exists ? \"have\" : \"don't have\");\n});\n```\n\n### Aggregating Functions\n\nIf you need to get some aggregated values from a Model, you can use `Model.aggregate()`. Here's an example to better\nillustrate:\n\n```js\nPerson.aggregate({ surname: \"Doe\" }).min(\"age\").max(\"age\").get(function (err, min, max) {\n\tconsole.log(\"The youngest Doe guy has %d years, while the oldest is %d\", min, max);\n});\n```\n\nAn `Array` of properties can be passed to select only a few properties. An `Object` is also accepted to define conditions.\n\nHere's an example to illustrate how to use `.groupBy()`:\n\n```js\n//The same as \"select avg(weight), age from person where country='someCountry' group by age;\"\nPerson.aggregate([\"age\"], { country: \"someCountry\" }).avg(\"weight\").groupBy(\"age\").get(function (err, stats) {\n    // stats is an Array, each item should have 'age' and 'avg_weight'\n});\n```\n\n### Base `.aggregate()` methods\n\n- `.limit()`: you can pass a number as a limit, or two numbers as offset and limit respectively\n- `.order()`: same as `Model.find().order()`\n\n### Additional `.aggregate()` methods\n\n- `min`\n- `max`\n- `avg`\n- `sum`\n- `count` (there's a shortcut to this - `Model.count`)\n\nThere are more aggregate functions depending on the driver (Math functions for example).\n\n#### Chaining\n\nIf you prefer less complicated syntax you can chain `.find()` by not giving a callback parameter.\n\n```js\nPerson.find({ surname: \"Doe\" }).limit(3).offset(2).only(\"name\", \"surname\").run(function (err, people) {\n    // finds people with surname='Doe', skips first 2 and limits to 3 elements,\n    // returning only 'name' and 'surname' properties\n});\n```\n\nYou can also chain and just get the count in the end. In this case, offset, limit and order are ignored.\n\n```js\nPerson.find({ surname: \"Doe\" }).count(function (err, people) {\n    // people = number of people with surname=\"Doe\"\n});\n```\n\nAlso available is the option to remove the selected items.\n\n```js\nPerson.find({ surname: \"Doe\" }).remove(function (err) {\n    // Does gone..\n});\n```\n\nYou can also make modifications to your instances using common Array traversal methods and save everything\nin the end.\n\n```js\nPerson.find({ surname: \"Doe\" }).each(function (person) {\n\tperson.surname = \"Dean\";\n}).save(function (err) {\n\t// done!\n});\n\nPerson.find({ surname: \"Doe\" }).each().filter(function (person) {\n\treturn person.age >= 18;\n}).sort(function (person1, person2) {\n\treturn person1.age < person2.age;\n}).get(function (people) {\n\t// get all people with at least 18 years, sorted by age\n});\n```\n\nOf course you could do this directly on `.find()`, but for some more complicated tasks this can be very usefull.\n\n`Model.find()` does not return an Array so you can't just chain directly. To start chaining you have to call\n`.each()` (with an optional callback if you want to traverse the list). You can then use the common functions\n`.filter()`, `.sort()` and `.forEach()` more than once.\n\nIn the end (or during the process..) you can call:\n- `.count()` if you just want to know how many items there are;\n- `.get()` to retrieve the list;\n- `.save()` to save all item changes.\n\n#### Conditions\n\nConditions are defined as an object where every key is a property (table column). All keys are supposed\nto be concatenated by the logical `AND`. Values are considered to match exactly, unless you're passing\nan `Array`. In this case it is considered a list to compare the property with.\n\n```js\n{ col1: 123, col2: \"foo\" } // `col1` = 123 AND `col2` = 'foo'\n{ col1: [ 1, 3, 5 ] } // `col1` IN (1, 3, 5)\n```\n\nIf you need other comparisons, you have to use a special object created by some helper functions. Here are\na few examples to describe it:\n\n```js\n{ col1: orm.eq(123) } // `col1` = 123 (default)\n{ col1: orm.ne(123) } // `col1` <> 123\n{ col1: orm.gt(123) } // `col1` > 123\n{ col1: orm.gte(123) } // `col1` >= 123\n{ col1: orm.lt(123) } // `col1` < 123\n{ col1: orm.lte(123) } // `col1` <= 123\n{ col1: orm.between(123, 456) } // `col1` BETWEEN 123 AND 456\n{ col1: orm.like(12 + \"%\") } // `col1` like '12%'\n```\n\n### Caching & Integrity\n\nModel instances are cached. If multiple different queries will result in the same result, you will\nget the same object. If you have other systems that can change your database (or you're developing and need\nto make some manual changes) you should remove this feature by disabling cache. This can be done when you're\ndefining the Model.\n\n```js\nvar Person = db.define('person', {\n\tname    : String\n}, {\n\tcache   : false\n});\n```\n\nand also globally:\n\n```js\norm.connect('...', function(err, db) {\n  db.settings.set('instance.cache', false);\n});\n```\n\nThe cache can be configured to expire after a period of time by passing in a number instead of a\nboolean. The number will be considered the cache timeout in seconds (you can use floating point).\n\n**Note**: One exception about Caching is that it won't be used if an instance is not saved. For example, if\nyou fetch a Person and then change it, while it doesn't get saved it won't be passed from Cache.\n\n## Creating Items\n\n### Model.create(items, cb)\n\nTo insert new elements to the database use `Model.create`.\n\n```js\nPerson.create([\n\t{\n\t\tname: \"John\",\n\t\tsurname: \"Doe\",\n\t\tage: 25,\n\t\tmale: true\n\t},\n\t{\n\t\tname: \"Liza\",\n\t\tsurname: \"Kollan\",\n\t\tage: 19,\n\t\tmale: false\n\t}\n], function (err, items) {\n\t// err - description of the error or null\n\t// items - array of inserted items\n});\n```\n\n## Updating Items\n\nEvery item returned has the properties that were defined to the Model and also a couple of methods you can\nuse to change each item.\n\n```js\nPerson.get(1, function (err, John) {\n\tJohn.name = \"Joe\";\n\tJohn.surname = \"Doe\";\n\tJohn.save(function (err) {\n\t\tconsole.log(\"saved!\");\n\t});\n});\n```\n\nUpdating and then saving an instance can be done in a single call:\n\n```js\nPerson.get(1, function (err, John) {\n\tJohn.save({ name: \"Joe\", surname: \"Doe\" }, function (err) {\n\t\tconsole.log(\"saved!\");\n\t});\n});\n```\n\nIf you want to remove an instance, just do:\n\n```js\n// you could do this without even fetching it, look at Chaining section above\nPerson.get(1, function (err, John) {\n\tJohn.remove(function (err) {\n\t\tconsole.log(\"removed!\");\n\t});\n});\n```\n\n## Validations\n\nYou can define validations for every property of a Model. You can have one or more validations for each property.\nYou can also use the predefined validations or create your own.\n\n```js\nvar Person = db.define(\"person\", {\n\tname : String,\n\tage  : Number\n}, {\n\tvalidations : {\n\t\tname : orm.validators.rangeLength(1, undefined, \"missing\"), // \"missing\" is a name given to this validation, instead of default\n\t\tage  : [ orm.validators.rangeNumber(0, 10), orm.validators.insideList([ 1, 3, 5, 7, 9 ]) ]\n\t}\n});\n```\n\nThe code above defines that the `name` length must be between 1 and undefined (undefined means any) and `age`\nmust be a number between 0 and 10 (inclusive) but also one of the listed values. The example might not make sense\nbut you get the point.\n\nWhen saving an item, if it fails to validate any of the defined validations you'll get an `error` object with the property\nname and validation error description. This description should help you identify what happened.\n\n```js\nvar John = new Person({\n\tname : \"\",\n\tage : 20\n});\nJohn.save(function (err) {\n\t// err.field = \"name\" , err.value = \"\" , err.msg = \"missing\"\n});\n```\n\nThe validation stops after the first validation error. If you want it to validate every property and return all validation\nerrors, you can change this behavior on global or local settings:\n\n```js\nvar orm = require(\"orm\");\n\norm.settings.set(\"instance.returnAllErrors\", true); // global or..\n\norm.connect(\"....\", function (err, db) {\n\tdb.settings.set(\"instance.returnAllErrors\", true); // .. local\n\n\t// ...\n\n\tvar John = new Person({\n\t\tname : \"\",\n\t\tage : 15\n\t});\n\tJohn.save(function (err) {\n\t\tassert(Array.isArray(err));\n\t\t// err[0].field = \"name\" , err[0].value = \"\" , err[0].msg = \"missing\"\n\t\t// err[1].field = \"age\"  , err[1].value = 15 , err[1].msg = \"out-of-range-number\"\n\t\t// err[2].field = \"age\"  , err[2].value = 15 , err[2].msg = \"outside-list\"\n\t});\n});\n```\n\n### Predefined Validations\n\nPredefined validations accept an optional last parameter `msg` that is the `Error.msg` if it's triggered.\n\n#### `required(msg)`\n\nEnsures property is not `null` or `undefined`. It does not trigger any error if property is `0` or empty string.\n\n#### `rangeNumber(min, max, msg)`\n\nEnsures a property is a number between `min` and `max`. Any of the parameters can be passed as `undefined`\nto exclude a minimum or maximum value.\n\n#### `rangeLength(min, max, msg)`\n\nSame as previous validator but for property length (strings).\n\n#### `insideList(list, msg)`\n\nEnsures a property value is inside a list of values.\n\n#### `outsideList(list, msg)`\n\nEnsures a property value is not inside a list of values.\n\n#### `equalToProperty(property, msg)`\n\nEnsures a property value is not the same as another property value in the instance. This validator is good for example for\npassword and password repetition check.\n\n#### `notEmptyString(msg)`\n\nThis is an alias for `rangeLength(1, undefined, 'empty-string')`.\n\n#### `unique(msg)`\n\nEnsures there's not another instance in your database already with that property value. This validator is good for example for\nunique identifiers.\n\n#### `password([ checks, ]msg)`\n\nEnsures the property value has some defined types of characters, usually wanted in a password. `checks` is optional and\ndefaults to `\"luns6\"` which leans `l`owercase letters, `u`ppercase letters, `n`umbers, `s`pecial characters, with a minimum\nlength of `6`.\n\n#### `patterns.match(pattern, modifiers, msg)`\n\nEnsures the property value passes the regular expression pattern (and regex modifiers).\n\nThe next `patterns.*` are comodity alias to this one.\n\n#### `patterns.hexString(msg)`\n\nEnsures the property value is an hexadecimal string (uppercase or lowercase).\n\n#### `patterns.email(msg)`\n\nEnsures the property value is a valid e-mail (more or less).\n\n#### `patterns.ipv4(msg)`\n\nEnsures the property value is a valid IPv4 address. It does not accept masks (example: `0` as last number is not valid).\n\n## Associations\n\nAn association is a relation between one or more tables.\n\n### hasOne\n\nIs a **many to one** relationship. It's the same as **belongs to.**<br/>\nEg: `Animal.hasOne('owner', Person)`.<br/>\nAnimal can only have one owner, but Person can have many animals.<br/>\nAnimal will have the `owner_id` property automatically added.\n\nThe following functions will become available:\n```js\nanimal.getOwner(function..)         // Gets owner\nanimal.setOwner(person, function..) // Sets owner_id\nanimal.hasOwner(function..)         // Checks if owner exists\nanimal.removeOwner()                // Sets owner_id to 0\n```\n\n**Reverse access**\n\n```js\nAnimal.hasOne('owner', Person, {reverse: 'pets'})\n```\n\nwill add the following:\n\n```js\nperson.getPets(function..)\nperson.setPets(cat, function..)\n```\n\n### hasMany\n\nIs a **many to many** relationship (includes join table).<br/>\nEg: `Patient.hasMany('doctors', Doctor, { why: String }, { reverse: 'patients' })`.<br/>\nPatient can have many different doctors. Each doctor can have many different patients.\n\nThis will create a join table `patient_doctors` when you call `Patient.sync()`:\n\n column name | type\n :-----------|:--------\n patient_id  | Integer\n doctor_id   | Integer\n why         | varchar(255)\n\nThe following functions will be available:\n\n```js\npatient.getDoctors(function..)           // List of doctors\npatient.addDoctors(docs, function...)    // Adds entries to join table\npatient.setDoctors(docs, function...)    // Removes existing entries in join table, adds new ones\npatient.hasDoctors(docs, function...)    // Checks if patient is associated to specified doctors\npatient.removeDoctors(docs, function...) // Removes specified doctors from join table\n\ndoctor.getPatients(function..)\netc...\n```\n\nTo associate a doctor to a patient:\n\n```js\npatient.addDoctor(surgeon, {why: \"remove appendix\"}, function(err) { ... } )\n```\n\nwhich will add `{patient_id: 4, doctor_id: 6, why: \"remove appendix\"}` to the join table.\n\n### extendsTo\n\nIf you want to split maybe optional properties into different tables or collections. Every extension will be in a new table,\nwhere the unique identifier of each row is the main model instance id. For example:\n\n```js\nvar Person = db.define(\"person\", {\n    name : String\n});\nvar PersonAddress = Person.extendsTo(\"address\", {\n    street : String,\n    number : Number\n});\n```\n\nThis will create a table `person` with columns `id` and `name`. The extension will create a table `person_address` with\ncolumns `person_id`, `street` and `number`. The methods available in the `Person` model are similar to an `hasOne`\nassociation. In this example you would be able to call `.getAddress(cb)`, `.setAddress(Address, cb)`, ..\n\n**Note:** you don't have to save the result from `Person.extendsTo`. It returns an extended model. You can use it to query\ndirectly this extended table (and even find the related model) but that's up to you. If you only want to access it using the\noriginal model you can just discard the return.\n\n### Examples & options\n\nIf you have a relation of 1 to n, you should use `hasOne` (belongs to) association.\n\n```js\nvar Person = db.define('person', {\n    name : String\n});\nvar Animal = db.define('animal', {\n    name : String\n});\nAnimal.hasOne(\"owner\", Person); // creates column 'owner_id' in 'animal' table\n\n// get animal with id = 123\nAnimal.get(123, function (err, animal) {\n    // animal is the animal model instance, if found\n    Foo.getOwner(function (err, person) {\n        // if animal has really an owner, person points to it\n    });\n});\n```\n\nYou can mark the `owner_id` field as required in the database by specifying the `required` option:\n```js\nAnimal.hasOne(\"owner\", Person, { required: true });\n```\n\nIf you prefer to use another name for the field (owner_id) you can change this parameter in the settings.\n\n```js\ndb.settings.set(\"properties.association_key\", \"id_{name}\"); // {name} will be replaced by 'owner' in this case\n```\n\n**Note: This has to be done before the association is specified.**\n\nThe `hasMany` associations can have additional properties in the association table.\n\n```js\nvar Person = db.define('person', {\n    name : String\n});\nPerson.hasMany(\"friends\", {\n    rate : Number\n});\n\nPerson.get(123, function (err, John) {\n    John.getFriends(function (err, friends) {\n        // assumes rate is another column on table person_friends\n        // you can access it by going to friends[N].extra.rate\n    });\n});\n```\n\nIf you prefer you can activate `autoFetch`.\nThis way associations are automatically fetched when you get or find instances of a model.\n\n```js\nvar Person = db.define('person', {\n  name : String\n});\nPerson.hasMany(\"friends\", {\n    rate : Number\n}, {\n    autoFetch : true\n});\n\nPerson.get(123, function (err, John) {\n    // no need to do John.getFriends() , John already has John.friends Array\n});\n```\n\nYou can also define this option globally instead of a per association basis.\n\n```js\nvar Person = db.define('person', {\n    name : String\n}, {\n    autoFetch : true\n});\nPerson.hasMany(\"friends\", {\n    rate : Number\n});\n```\n\nAssociations can make calls to the associated Model by using the `reverse` option. For example, if you have an\nassociation from ModelA to ModelB, you can create an accessor in ModelB to get instances from ModelA.\nConfusing? Look at the next example.\n\n```js\nvar Pet = db.define('pet', {\n    name : String\n});\nvar Person = db.define('person', {\n    name : String\n});\nPet.hasOne(\"owner\", Person, {\n    reverse : \"pets\"\n});\n\nPerson(4).getPets(function (err, pets) {\n    // although the association was made on Pet,\n    // Person will have an accessor (getPets)\n    //\n    // In this example, ORM will fetch all pets\n    // whose owner_id = 4\n});\n```\n\nThis makes even more sense when having `hasMany` associations since you can manage the *many to many*\nassociations from both sides.\n\n```js\nvar Pet = db.define('pet', {\n    name : String\n});\nvar Person = db.define('person', {\n    name : String\n});\nPerson.hasMany(\"pets\", Pet, {\n    bought  : Date\n}, {\n    reverse : \"owners\"\n});\n\nPerson(1).getPets(...);\nPet(2).getOwners(...);\n```\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/dresende/node-orm2/issues"
  },
  "_id": "orm@2.0.15",
  "dist": {
    "shasum": "67aa575738c538d5a57c010d919e18d0bc561797"
  },
  "_from": "orm@~2.0.11",
  "_resolved": "https://registry.npmjs.org/orm/-/orm-2.0.15.tgz"
}
